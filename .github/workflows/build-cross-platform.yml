name: Build Cross-Platform Binaries

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['apps/node/**']
  pull_request:
    paths: ['apps/node/**']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Setup macOS dependencies
        if: contains(matrix.settings.host, 'macos')
        run: |
          brew install ffmpeg pkg-config llvm
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$(brew --prefix ffmpeg)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix ffmpeg)/lib" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$(brew --prefix ffmpeg)/include" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I$(brew --prefix)/include" >> $GITHUB_ENV
          
      - name: Setup Linux dependencies
        if: contains(matrix.settings.host, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-multilib \
            pkg-config \
            libpipewire-0.3-dev \
            libasound2-dev \
            libpulse-dev \
            libjack-jackd2-dev \
            libssl-dev \
            libv4l-dev \
            libclang-dev \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            libswresample-dev \
            linux-libc-dev \
            build-essential \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include/linux" >> $GITHUB_ENV
          
      - name: Setup Windows dependencies
        if: contains(matrix.settings.host, 'windows')
        shell: powershell
        run: |
          # Install vcpkg for FFmpeg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe integrate install
          
          # Install FFmpeg with static linking
          C:\vcpkg\vcpkg.exe install ffmpeg[core,avcodec,avformat,avdevice,avfilter,avutil,swresample,swscale]:x64-windows-static
          
          # Set environment variables
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "FFMPEG_DIR=C:\vcpkg\installed\x64-windows-static" >> $env:GITHUB_ENV
          echo "LIBPATH=C:\vcpkg\installed\x64-windows-static\lib;$env:LIBPATH" >> $env:GITHUB_ENV
          
      - name: Setup Linux ARM cross compilation
        if: contains(matrix.settings.target, 'aarch64') && contains(matrix.settings.host, 'ubuntu')
        run: |
          echo "ARM64 cross-compilation temporarily disabled due to system dependency complexity"
          exit 1
          
      - name: Install dependencies
        working-directory: apps/node
        run: pnpm install
        
      - name: Build
        working-directory: apps/node
        run: npx napi build --platform --release --target ${{ matrix.settings.target }}
        env:
          RUST_TARGET: ${{ matrix.settings.target }}
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          LIBCLANG_PATH: ${{ 
            contains(matrix.settings.host, 'ubuntu') && '/usr/lib/llvm-14/lib' || 
            contains(matrix.settings.host, 'macos') && '/opt/homebrew/opt/llvm/lib' || 
            '' }}
          BINDGEN_EXTRA_CLANG_ARGS: ${{ 
            contains(matrix.settings.host, 'ubuntu') && '-I/usr/include/linux' || 
            contains(matrix.settings.host, 'macos') && '-I/opt/homebrew/include' || 
            '' }}
          VCPKG_ROOT: ${{ contains(matrix.settings.host, 'windows') && 'C:\vcpkg' || '' }}
          FFMPEG_DIR: ${{ contains(matrix.settings.host, 'windows') && 'C:\vcpkg\installed\x64-windows-static' || '' }}
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.settings.target }}
          path: apps/node/*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          registry-url: https://registry.npmjs.org/
          
      - name: Install dependencies
        working-directory: apps/node
        run: pnpm install
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: apps/node/artifacts
          
      - name: Move binaries to correct location
        working-directory: apps/node
        run: |
          for dir in artifacts/binaries-*; do
            if [ -d "$dir" ]; then
              mv "$dir"/*.node . 2>/dev/null || true
            fi
          done
          ls -la *.node
          
      - name: Publish to npm
        working-directory: apps/node
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
