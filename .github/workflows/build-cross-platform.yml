# .github/workflows/build-cross-platform.yml
name: Build Cross-Platform Binaries

on:
  workflow_dispatch:
  push:
    branches: [main, strats]
    paths: ['apps/node/**', 'crates/**']
  pull_request:
    paths: ['apps/node/**', 'crates/**']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # macOS ARM64 (Apple Silicon)
          - host: macos-14
            target: aarch64-apple-darwin
            name: macOS ARM64
            
          # macOS Intel
          - host: macos-13
            target: x86_64-apple-darwin
            name: macOS Intel
            
          # Windows x64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            
          # Linux x64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: Linux x64

    name: Build ${{ matrix.settings.name }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: apps/node/package-lock.json
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      # macOS Dependencies
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          echo "üçé Installing macOS dependencies..."
          brew install ffmpeg pkg-config llvm
          
          # Verify installation
          brew list ffmpeg
          pkg-config --exists libavutil && echo "‚úÖ FFmpeg pkg-config found" || echo "‚ùå FFmpeg pkg-config not found"
          
          # Get Homebrew and FFmpeg paths
          HOMEBREW_PREFIX=$(brew --prefix)
          FFMPEG_PREFIX=$(brew --prefix ffmpeg)
          LLVM_PREFIX=$(brew --prefix llvm)
          
          # Set up comprehensive environment variables for FFmpeg
          echo "PKG_CONFIG_PATH=$HOMEBREW_PREFIX/lib/pkgconfig:$FFMPEG_PREFIX/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$HOMEBREW_PREFIX/lib:$FFMPEG_PREFIX/lib" >> $GITHUB_ENV
          echo "CPATH=$HOMEBREW_PREFIX/include:$FFMPEG_PREFIX/include" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=$HOMEBREW_PREFIX/include:$FFMPEG_PREFIX/include" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=$HOMEBREW_PREFIX/include:$FFMPEG_PREFIX/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          # Set LIBCLANG_PATH for bindgen/clang dependencies
          echo "LIBCLANG_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
          
          # Create symlinks for system-style paths (fallback for build systems expecting /usr/include)
          sudo mkdir -p /usr/local/include
          sudo ln -sf $FFMPEG_PREFIX/include/* /usr/local/include/ || true
          
          # Set FFMPEG_DIR for build systems that look for it
          echo "FFMPEG_DIR=$FFMPEG_PREFIX" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=$FFMPEG_PREFIX/include" >> $GITHUB_ENV
          echo "FFMPEG_LIB_DIR=$FFMPEG_PREFIX/lib" >> $GITHUB_ENV
          
          # Additional environment variables for FFmpeg-sys crate
          echo "FFMPEG_PKG_CONFIG_PATH=$FFMPEG_PREFIX/lib/pkgconfig" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I$FFMPEG_PREFIX/include" >> $GITHUB_ENV
          
          # Force FFmpeg-sys to use pkg-config instead of looking in /usr/include
          echo "FFMPEG_SYS_NO_DEFAULT_INCLUDE_PATHS=1" >> $GITHUB_ENV
          
          # Verify FFmpeg can be found
          echo "üîç Verifying FFmpeg installation..."
          pkg-config --cflags libavutil || echo "‚ùå libavutil cflags failed"
          pkg-config --libs libavutil || echo "‚ùå libavutil libs failed"
          pkg-config --cflags libswscale || echo "‚ùå libswscale cflags failed"
          
          # Check if headers are accessible
          echo "üîç Checking header file locations..."
          find $FFMPEG_PREFIX/include -name "swscale.h" -type f | head -5
          ls -la $FFMPEG_PREFIX/include/libswscale/ || echo "libswscale directory not found in expected location"
          
          # Show paths for debugging
          echo "üìç Homebrew prefix: $HOMEBREW_PREFIX"
          echo "üìç FFmpeg prefix: $FFMPEG_PREFIX"
          echo "üìç LLVM prefix: $LLVM_PREFIX"
          echo "üìç LIBCLANG_PATH: $LLVM_PREFIX/lib"
          echo "üìç PKG_CONFIG_PATH: $HOMEBREW_PREFIX/lib/pkgconfig:$FFMPEG_PREFIX/lib/pkgconfig"
          echo "üìç C_INCLUDE_PATH: $HOMEBREW_PREFIX/include:$FFMPEG_PREFIX/include"
          
      # Linux Dependencies - Using the successful strategy from the log
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          echo "üêß Installing Linux dependencies..."
          
          # Update package list
          sudo apt-get update
          
          # Install core build dependencies
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libclang-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrandr-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev
          
          # Install PipeWire dependencies (this was the key to success!)
          sudo apt-get install -y libpipewire-0.3-dev || true
          
          # Set up environment variables
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          # Find and set LIBCLANG_PATH
          for path in /usr/lib/llvm-*/lib /usr/lib/x86_64-linux-gnu /usr/lib; do
            if ls $path/libclang.so* >/dev/null 2>&1; then
              echo "LIBCLANG_PATH=$path" >> $GITHUB_ENV
              break
            fi
          done
          
      # Windows vcpkg cache for faster builds
      - name: Cache vcpkg
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\buildtrees
          key: ${{ runner.os }}-vcpkg-ffmpeg-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-ffmpeg-
            
      # Windows Dependencies
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          echo "ü™ü Setting up Windows dependencies..."
          
          # Use the pre-installed vcpkg (GitHub Actions runners have it)
          $vcpkgRoot = $env:VCPKG_INSTALLATION_ROOT
          echo "üìç Using vcpkg at: $vcpkgRoot"
          
          # Install FFmpeg with static linking for better compatibility
          echo "üì¶ Installing FFmpeg..."
          & "$vcpkgRoot\vcpkg.exe" install ffmpeg:x64-windows-static
          
          # Install pkg-config (pkgconf on Windows)
          echo "üì¶ Installing pkg-config..."
          & "$vcpkgRoot\vcpkg.exe" install pkgconf:x64-windows-static
          
          # Set up comprehensive environment variables
          echo "VCPKG_ROOT=$vcpkgRoot" >> $env:GITHUB_ENV
          echo "FFMPEG_DIR=$vcpkgRoot\installed\x64-windows-static" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=$vcpkgRoot\installed\x64-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $env:GITHUB_ENV
          
          # Add pkg-config tools to PATH
          echo "$vcpkgRoot\installed\x64-windows-static\tools\pkgconf" >> $env:GITHUB_PATH
          echo "$vcpkgRoot\installed\x64-windows-static\bin" >> $env:GITHUB_PATH
          
          # Set additional environment variables for Windows multimedia libraries
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS=-L native=$vcpkgRoot\installed\x64-windows-static\lib -l strmiids -l mfuuid -l mf -l mfplat -l ole32 -l oleaut32 -l winmm -l uuid -l quartz" >> $env:GITHUB_ENV
          
          # Verify installations
          echo "üîç Verifying installations..."
          & "$vcpkgRoot\vcpkg.exe" list ffmpeg
          & "$vcpkgRoot\vcpkg.exe" list pkgconf
          
          # Test pkg-config functionality
          $pkgConfigPath = "$vcpkgRoot\installed\x64-windows-static\tools\pkgconf\pkgconf.exe"
          if (Test-Path $pkgConfigPath) {
            echo "‚úÖ pkg-config found at: $pkgConfigPath"
            & $pkgConfigPath --version
          } else {
            echo "‚ùå pkg-config not found"
          }
          
          echo "‚úÖ Windows dependencies setup complete"
          
      - name: Install Node.js dependencies
        working-directory: apps/node
        run: npm install
        
      - name: Debug build environment
        working-directory: apps/node
        run: |
          echo "üîç Build environment debug for ${{ matrix.settings.target }}..."
          echo "RUST_TARGET: ${{ matrix.settings.target }}"
          
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "üçé macOS Environment:"
            echo "FFMPEG_DIR: ${FFMPEG_DIR:-not set}"
            echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH:-not set}"
            echo "C_INCLUDE_PATH: ${C_INCLUDE_PATH:-not set}"
            echo "LIBRARY_PATH: ${LIBRARY_PATH:-not set}"
            echo "LIBCLANG_PATH: ${LIBCLANG_PATH:-not set}"
            echo "BINDGEN_EXTRA_CLANG_ARGS: ${BINDGEN_EXTRA_CLANG_ARGS:-not set}"
            echo "FFMPEG_SYS_NO_DEFAULT_INCLUDE_PATHS: ${FFMPEG_SYS_NO_DEFAULT_INCLUDE_PATHS:-not set}"
            
            # Test pkg-config
            pkg-config --version || echo "‚ùå pkg-config not found"
            pkg-config --exists libswscale && echo "‚úÖ libswscale found" || echo "‚ùå libswscale not found"
            pkg-config --cflags libswscale || echo "‚ùå libswscale cflags failed"
            
            # Test LLVM/clang
            echo "üîç Verifying LLVM installation..."
            if [[ -f "$LLVM_PREFIX/lib/libclang.dylib" ]]; then
              echo "‚úÖ libclang found at $LLVM_PREFIX/lib/libclang.dylib"
            else
              echo "‚ùå libclang not found at expected location"
              find $LLVM_PREFIX -name "libclang*" 2>/dev/null | head -3 || echo "No libclang files found"
            fi
            
            # Check for header files
            echo "üîç Looking for swscale.h..."
            find /usr/local/include /opt/homebrew/include -name "swscale.h" 2>/dev/null | head -3 || echo "No swscale.h found in standard locations"
            
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "ü™ü Windows Environment:"
            echo "VCPKG_ROOT: ${VCPKG_ROOT:-not set}"
            echo "FFMPEG_DIR: ${FFMPEG_DIR:-not set}"
            echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS:-not set}"
            
            # Check for Windows SDK libraries that FFmpeg needs
            echo "üîç Checking Windows SDK libraries..."
            powershell -Command "
              \$sdkPath = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots' -Name KitsRoot10 -ErrorAction SilentlyContinue).KitsRoot10
              if (\$sdkPath) {
                Write-Host 'üìç Windows SDK found at:' \$sdkPath
                \$libPaths = Get-ChildItem \"\$sdkPath\\Lib\" -Directory | Sort-Object Name -Descending | Select-Object -First 1
                if (\$libPaths) {
                  Write-Host 'üìç Latest SDK lib path:' \$libPaths.FullName
                  \$x64Path = Join-Path \$libPaths.FullName 'um\x64'
                  if (Test-Path \$x64Path) {
                    Write-Host 'üìç x64 libraries path:' \$x64Path
                    \$requiredLibs = @('strmiids.lib', 'mfuuid.lib', 'mf.lib', 'mfplat.lib', 'ole32.lib', 'oleaut32.lib', 'winmm.lib', 'uuid.lib')
                    foreach (\$lib in \$requiredLibs) {
                      if (Test-Path (Join-Path \$x64Path \$lib)) {
                        Write-Host \"‚úÖ Found: \$lib\"
                      } else {
                        Write-Host \"‚ùå Missing: \$lib\"
                      }
                    }
                  } else {
                    Write-Host '‚ùå x64 library path not found'
                  }
                } else {
                  Write-Host '‚ùå No SDK lib directories found'
                }
              } else {
                Write-Host '‚ùå Windows SDK not found in registry'
              }
            "
            
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "üêß Linux Environment:"
            echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH:-not set}"
            echo "LIBCLANG_PATH: ${LIBCLANG_PATH:-not set}"
          fi
        
      - name: Build native binary
        working-directory: apps/node
        run: |
          echo "üî® Building for ${{ matrix.settings.target }}..."
          npx @napi-rs/cli build --platform --release --target ${{ matrix.settings.target }}
        env:
          RUST_TARGET: ${{ matrix.settings.target }}
          # Ensure Windows environment variables are available during build
          VCPKG_ROOT: ${{ runner.os == 'Windows' && env.VCPKG_ROOT || '' }}
          FFMPEG_DIR: ${{ env.FFMPEG_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: ${{ env.PKG_CONFIG_ALLOW_SYSTEM_LIBS }}
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: ${{ env.PKG_CONFIG_ALLOW_SYSTEM_CFLAGS }}
          # macOS specific environment variables
          LIBRARY_PATH: ${{ env.LIBRARY_PATH }}
          CPATH: ${{ env.CPATH }}
          C_INCLUDE_PATH: ${{ env.C_INCLUDE_PATH }}
          CPLUS_INCLUDE_PATH: ${{ env.CPLUS_INCLUDE_PATH }}
          FFMPEG_INCLUDE_DIR: ${{ env.FFMPEG_INCLUDE_DIR }}
          FFMPEG_LIB_DIR: ${{ env.FFMPEG_LIB_DIR }}
          FFMPEG_PKG_CONFIG_PATH: ${{ env.FFMPEG_PKG_CONFIG_PATH }}
          BINDGEN_EXTRA_CLANG_ARGS: ${{ env.BINDGEN_EXTRA_CLANG_ARGS }}
          FFMPEG_SYS_NO_DEFAULT_INCLUDE_PATHS: ${{ env.FFMPEG_SYS_NO_DEFAULT_INCLUDE_PATHS }}
          # Linux specific environment variables
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH }}
          # Windows-specific rustflags for multimedia libraries
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ env.CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS }}
          
      - name: Test module loading
        working-directory: apps/node
        run: |
          echo "üß™ Testing module loading..."
          node -e "
            try {
              const cap = require('./index.js');
              console.log('‚úÖ Module loaded successfully');
              console.log('Available functions:', Object.keys(cap));
            } catch (e) {
              console.error('‚ùå Module load failed:', e.message);
              process.exit(1);
            }
          "
          
      - name: Verify build artifacts
        working-directory: apps/node
        shell: bash
        run: |
          echo "üìÅ Build artifacts:"
          ls -la *.node || echo "No .node files found"
          
          # Show file info for non-Windows
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            for file in *.node; do
              if [[ -f "$file" ]]; then
                echo "File: $file"
                file "$file"
                echo "Size: $(du -h "$file" | cut -f1)"
                echo "---"
              fi
            done
          else
            # Windows-specific verification
            echo "ü™ü Windows build verification:"
            for file in *.node; do
              if [[ -f "$file" ]]; then
                echo "File: $file"
                echo "Size: $(du -h "$file" | cut -f1)"
                # Check if it's a valid Windows DLL
                if command -v file >/dev/null 2>&1; then
                  file "$file"
                fi
                echo "---"
              fi
            done
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cap-node-${{ matrix.settings.target }}
          path: apps/node/*.node
          retention-days: 7
          if-no-files-found: error
  # Summary job to show results
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Display build summary
        run: |
          echo "üéâ Cross-platform build completed!"
          echo ""
          echo "üì¶ Built binaries:"
          find artifacts/ -name "*.node" -exec basename {} \; | sort
          echo ""
          echo "ÔøΩ Total artifacts:"
          find artifacts/ -name "*.node" -exec ls -lh {} \; | awk '{print $5, $9}'
          echo ""
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All builds successful!"
          else
            echo "‚ùå Some builds failed. Check individual job logs."
            exit 1
          fi