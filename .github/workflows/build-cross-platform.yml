# .github/workflows/build-cross-platform.yml
name: Build Cross-Platform Binaries

on:
  workflow_dispatch:
  push:
    branches: [main, strats]
    paths: ['apps/node/**', 'crates/**']
  pull_request:
    paths: ['apps/node/**', 'crates/**']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # macOS ARM64 (Apple Silicon)
          - host: macos-14
            target: aarch64-apple-darwin
            name: macOS ARM64
            
          # macOS Intel
          - host: macos-13
            target: x86_64-apple-darwin
            name: macOS Intel
            
          # Windows x64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            
          # Linux x64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: Linux x64

    name: Build ${{ matrix.settings.name }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: apps/node/package-lock.json
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      # macOS Dependencies
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          echo "üçé Installing macOS dependencies..."
          brew install ffmpeg pkg-config
          
          # Set up environment variables
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "FFMPEG_DIR=$(brew --prefix)/bin" >> $GITHUB_ENV
          
      # Linux Dependencies - Using the successful strategy from the log
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          echo "üêß Installing Linux dependencies..."
          
          # Update package list
          sudo apt-get update
          
          # Install core build dependencies
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libclang-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrandr-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev
          
          # Install PipeWire dependencies (this was the key to success!)
          sudo apt-get install -y libpipewire-0.3-dev || true
          
          # Set up environment variables
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          # Find and set LIBCLANG_PATH
          for path in /usr/lib/llvm-*/lib /usr/lib/x86_64-linux-gnu /usr/lib; do
            if ls $path/libclang.so* >/dev/null 2>&1; then
              echo "LIBCLANG_PATH=$path" >> $GITHUB_ENV
              break
            fi
          done
          
      # Windows Dependencies
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          echo "ü™ü Setting up Windows environment..."
          # Windows should work with just the build tools already available
          
      - name: Install Node.js dependencies
        working-directory: apps/node
        run: npm install
        
      - name: Build native binary
        working-directory: apps/node
        run: |
          echo "üî® Building for ${{ matrix.settings.target }}..."
          npx @napi-rs/cli build --platform --release --target ${{ matrix.settings.target }}
        env:
          RUST_TARGET: ${{ matrix.settings.target }}
          
      - name: Test module loading
        working-directory: apps/node
        run: |
          echo "üß™ Testing module loading..."
          node -e "
            try {
              const cap = require('./index.js');
              console.log('‚úÖ Module loaded successfully');
              console.log('Available functions:', Object.keys(cap));
            } catch (e) {
              console.error('‚ùå Module load failed:', e.message);
              process.exit(1);
            }
          "
          
      - name: Verify build artifacts
        working-directory: apps/node
        shell: bash
        run: |
          echo "üìÅ Build artifacts:"
          ls -la *.node || echo "No .node files found"
          
          # Show file info for non-Windows
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            for file in *.node; do
              if [[ -f "$file" ]]; then
                echo "File: $file"
                file "$file"
                echo "Size: $(du -h "$file" | cut -f1)"
                echo "---"
              fi
            done
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cap-node-${{ matrix.settings.target }}
          path: apps/node/*.node
          retention-days: 7
          if-no-files-found: error
  # Summary job to show results
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Display build summary
        run: |
          echo "üéâ Cross-platform build completed!"
          echo ""
          echo "üì¶ Built binaries:"
          find artifacts/ -name "*.node" -exec basename {} \; | sort
          echo ""
          echo "ÔøΩ Total artifacts:"
          find artifacts/ -name "*.node" -exec ls -lh {} \; | awk '{print $5, $9}'
          echo ""
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All builds successful!"
          else
            echo "‚ùå Some builds failed. Check individual job logs."
            exit 1
          fi