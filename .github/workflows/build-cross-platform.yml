# .github/workflows/build-cross-platform.yml
# Updated to use native builds with separate runners
name: Build Cross-Platform Binaries

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['apps/node/**']
  pull_request:
    paths: ['apps/node/**']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # macOS ARM64 - Native build on ARM64 runner
          - host: macos-14                    # ARM64 GitHub runner
            target: aarch64-apple-darwin     # ARM64 target
            build: npm run build
            
          # macOS Intel - Native build on Intel runner  
          - host: macos-13                    # Intel GitHub runner
            target: x86_64-apple-darwin      # Intel target
            build: npm run build
            
          # Windows x64 - Native build
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build
            
          # Linux x64 - Native build
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      # macOS Dependencies - No cross-compilation needed!
      - name: Setup macOS dependencies (Native)
        if: contains(matrix.settings.host, 'macos')
        run: |
          echo "🍎 Setting up macOS dependencies for native build..."
          echo "Runner: ${{ matrix.settings.host }}"
          echo "Target: ${{ matrix.settings.target }}"
          echo "Current arch: $(uname -m)"
          
          # Install dependencies via Homebrew
          brew install ffmpeg pkg-config
          
          # Set up environment for NATIVE build (no cross-compilation)
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$(brew --prefix ffmpeg)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix ffmpeg)/lib" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$(brew --prefix ffmpeg)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          # Verify FFmpeg is found
          echo "✅ FFmpeg version: $(pkg-config --modversion libavcodec)"
          
      - name: Setup Linux dependencies (Complete FFmpeg)
        if: contains(matrix.settings.host, 'ubuntu')
        run: |
          sudo apt-get update
          
          # Install ALL FFmpeg libraries
          sudo apt-get install -y \
            build-essential pkg-config \
            libpipewire-0.3-dev libasound2-dev libpulse-dev \
            libssl-dev libv4l-dev ffmpeg \
            libavcodec-dev libavformat-dev libavutil-dev \
            libswscale-dev libswresample-dev libavfilter-dev \
            libavdevice-dev linux-libc-dev \
            clang libclang-dev libclang1

          # libclang detection
          for path in /usr/lib/llvm-*/lib /usr/lib/x86_64-linux-gnu; do
            if [[ -f "$path/libclang.so" ]] || ls "$path"/libclang.so.* >/dev/null 2>&1; then
              echo "LIBCLANG_PATH=$path" >> $GITHUB_ENV
              break
            fi
          done

          # Simpler bindgen args (V4L2 issue will remain for now)
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include -I/usr/include/x86_64-linux-gnu --target=x86_64-unknown-linux-gnu -D_GNU_SOURCE" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
      - name: Setup Windows dependencies
        if: contains(matrix.settings.host, 'windows')
        run: |
          echo "🪟 Setting up Windows dependencies..."
          # Install pkg-config
          choco install pkgconfiglite -y
          
          # Install vcpkg and FFmpeg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install ffmpeg:x64-windows-static
          
          # Set environment variables
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows-static\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $env:GITHUB_ENV
          
      - name: Install dependencies
        working-directory: apps/node
        run: pnpm install
        
      # Native build - no cross-compilation!
      - name: Build (Native)
        working-directory: apps/node
        run: |
          echo "🔨 Building natively for ${{ matrix.settings.target }}..."
          echo "Host architecture: $(uname -m || echo 'unknown')"
          npx @napi-rs/cli build --platform --release --target ${{ matrix.settings.target }}
        env:
          RUST_TARGET: ${{ matrix.settings.target }}
        
      - name: Verify build output
        working-directory: apps/node
        run: |
          echo "📁 Build artifacts:"
          ls -la *.node || echo "No .node files found"
          
          # Show file info (macOS/Linux)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            for file in *.node; do
              if [[ -f "$file" ]]; then
                echo "File: $file"
                file "$file"
                echo "Size: $(du -h "$file" | cut -f1)"
                echo "---"
              fi
            done
          fi
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.settings.target }}
          path: apps/node/*.node
          if-no-files-found: error

  # Optional: Combine artifacts and publish
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          registry-url: https://registry.npmjs.org/
          
      - name: Install dependencies
        working-directory: apps/node
        run: pnpm install
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: apps/node/artifacts
          
      - name: Move binaries to correct location
        working-directory: apps/node
        run: |
          echo "📦 Organizing binaries..."
          for dir in artifacts/binaries-*; do
            if [ -d "$dir" ]; then
              echo "Processing $dir..."
              mv "$dir"/*.node . 2>/dev/null || true
            fi
          done
          
          echo "📁 Final binaries:"
          ls -la *.node
          
      - name: Publish to npm
        working-directory: apps/node
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}