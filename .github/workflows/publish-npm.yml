name: Publish NPM Package

on:
  push:
    branches:
      - main
    paths:
      - 'apps/node/**'
  workflow_dispatch:

env:
  DEBUG: napi:*
  APP_NAME: caprecorder
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-14
            target: x86_64-apple-darwin
            build: |
              cd apps/node
              npx @napi-rs/cli build --platform --release --target x86_64-apple-darwin
              strip -x *.node
          - host: macos-14
            target: aarch64-apple-darwin
            build: |
              cd apps/node
              npx @napi-rs/cli build --platform --release --target aarch64-apple-darwin
              strip -x *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cd apps/node
              npx @napi-rs/cli build --platform --release --target x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ubuntu:22.04

    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg pkg-config
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$(brew --prefix ffmpeg)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix ffmpeg)/lib" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$(brew --prefix ffmpeg)/include" >> $GITHUB_ENV

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Install dependencies
        run: npm install

      - name: Setup node dependencies
        run: |
          cd apps/node
          npm install
        shell: bash

      # FIX: Add V4L2 patch to WORKSPACE root (not local Cargo.toml)
      - name: Fix V4L2 bindgen issue at workspace root
        if: matrix.settings.docker
        run: |
          echo "🔧 Adding V4L2 bindgen patch to workspace root..."
          
          # Add patch to the WORKSPACE root Cargo.toml
          cat >> Cargo.toml << 'EOF'

# Fix v4l2-sys-mit bindgen anonymous union issue  
[patch.crates-io]
bindgen = "0.69.4"
v4l2-sys-mit = "0.3.0"
EOF
          
          echo "✅ Added patch to workspace root:"
          tail -5 Cargo.toml

      - name: Build in docker (V4L2 Fixed)
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache:/root/.cargo/registry/cache -v ${{ github.workspace }}/.cargo:/root/.cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: |-
            set -e
            
            echo "🐧 Ubuntu 22.04 build with V4L2 fix..."
            
            # Install essentials
            apt-get update
            apt-get install -y curl build-essential git pkg-config
            
            # Install Node.js 20
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs
            
            # Install Rust stable
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            source /root/.cargo/env
            rustup target add x86_64-unknown-linux-gnu
            
            # Install system dependencies (Ubuntu 22.04 has better V4L2 headers)
            apt-get install -y \
              libpipewire-0.3-dev \
              libasound2-dev \
              libpulse-dev \
              libjack-jackd2-dev \
              libssl-dev \
              libv4l-dev \
              clang \
              libclang-dev \
              ffmpeg \
              libavcodec-dev \
              libavformat-dev \
              libavutil-dev \
              libswscale-dev \
              libswresample-dev \
              linux-libc-dev
            
            # Set environment for compatibility
            export LIBCLANG_PATH="/usr/lib/x86_64-linux-gnu"
            export BINDGEN_EXTRA_CLANG_ARGS="-I/usr/include/linux -I/usr/include/x86_64-linux-gnu -I/usr/include"
            export PKG_CONFIG_ALLOW_CROSS=1
            export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
            export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
            export RUST_BACKTRACE=1
            
            # Verify workspace patch exists
            echo "🔍 Workspace patches:"
            grep -A 3 "\[patch.crates-io\]" Cargo.toml || echo "No patches found"
            
            # Build with workspace patches
            cd apps/node
            
            # Clean and regenerate with patches
            cargo clean
            npm install
            
            # Update Cargo.lock to apply workspace patches
            echo "🔄 Applying workspace patches..."
            cargo update
            
            # Build
            echo "🔨 Building with patched dependencies..."
            npx napi build --platform --release --target x86_64-unknown-linux-gnu
            
            # Verify and strip
            ls -la *.node
            strip *.node

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        env:
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          RUST_TARGET: ${{ matrix.settings.target }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: apps/node/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: |
          cd apps/node
          npm run artifacts
        shell: bash

      - name: List packages
        run: ls -la apps/node/npm
        shell: bash

      - name: Publish
        run: |
          cd apps/node
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}