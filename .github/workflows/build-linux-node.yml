name: Build Linux Node Package

on:
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
  
  # Automatic triggers
  push:
    branches: [main, dev]
    paths: 
      - 'apps/node/**'
      - 'crates/**'
      - '.github/workflows/build-linux-node.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'apps/node/**' 
      - 'crates/**'
      - '.github/workflows/build-linux-node.yml'

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/node/package-lock.json'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: linux-node-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            linux-node-cargo-

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libclang-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev \
            libpipewire-0.3-dev \
            libspa-0.2-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrandr-dev

      - name: Setup environment variables
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          # Find libclang
          for path in /usr/lib/llvm-*/lib /usr/lib/x86_64-linux-gnu /usr/lib; do
            if ls $path/libclang.so* >/dev/null 2>&1; then
              echo "LIBCLANG_PATH=$path" >> $GITHUB_ENV
              break
            fi
          done

      - name: Verify libspa elimination (success!)
        run: |
          echo "✅ Verifying libspa has been eliminated..."
          cd apps/node
          if cargo tree --target x86_64-unknown-linux-gnu | grep -E "(pipewire|libspa)" ; then
            echo "❌ ERROR: libspa still found in dependency tree"
            exit 1
          else
            echo "🎉 SUCCESS: No libspa dependencies found!"
            echo "✅ The audio feature fix worked perfectly"
          fi

      - name: Install Node dependencies
        working-directory: apps/node
        run: npm install

      - name: Test cargo metadata
        run: |
          echo "Testing if workspace configuration is valid..."
          cargo metadata --format-version 1 --quiet > /dev/null
          echo "✅ Workspace configuration is valid"

      - name: Try building without media features on Linux
        working-directory: apps/node
        run: |
          echo "🔧 Attempting build with minimal features for Linux..."
          
          # First try: build with no default features
          if cargo build --release --target x86_64-unknown-linux-gnu --no-default-features; then
            echo "✅ SUCCESS: Built with no default features"
            exit 0
          fi
          
          # Second try: check what features are available
          echo "📋 Available features:"
          cargo metadata --format-version 1 | jq '.packages[] | select(.name=="cap-node") | .features' || echo "No features found"
          
          # Third try: normal build (will likely fail, but gives us error info)
          echo "🔄 Trying normal build..."
          cargo build --release --target x86_64-unknown-linux-gnu
        continue-on-error: true

      - name: Test the build
        working-directory: apps/node
        run: |
          echo "Testing the built module..."
          node -e "console.log('Native module loaded successfully:', require('./index.node'))"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: cap-node-linux-x86_64
          path: apps/node/*.node
          retention-days: 7

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-logs
          path: |
            apps/node/target/**/*.log
            ~/.cargo/registry/src/**/build.log
          retention-days: 3