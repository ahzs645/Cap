name: Build Linux Node Package

on:
  workflow_dispatch:
  push:
    branches: [main, dev]
    paths: 
      - 'apps/node/**'
      - 'crates/**'
      - '.github/workflows/build-linux-node.yml'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/node/package-lock.json'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libclang-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libavfilter-dev \
            libavdevice-dev \
            libswscale-dev \
            libswresample-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrandr-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev

      - name: Setup environment variables
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          
          for path in /usr/lib/llvm-*/lib /usr/lib/x86_64-linux-gnu /usr/lib; do
            if ls $path/libclang.so* >/dev/null 2>&1; then
              echo "LIBCLANG_PATH=$path" >> $GITHUB_ENV
              break
            fi
          done

      - name: Install Node dependencies
        working-directory: apps/node
        run: npm install

      - name: Strategy 1 - Build without pipewire (disable audio)
        working-directory: apps/node
        continue-on-error: true
        id: build_no_audio
        run: |
          echo "üîß Strategy 1: Building without audio features..."
          
          # Create Cargo.toml patch to exclude audio
          cat > temp-cargo-patch.toml << 'EOF'
          [target.'cfg(target_os = "linux")'.dependencies]
          cap-media = { path = "../../crates/media", default-features = false }
          scap = { workspace = true, default-features = false }
          EOF
          
          # Backup original and apply patch
          cp Cargo.toml Cargo.toml.backup
          cat temp-cargo-patch.toml >> Cargo.toml
          
          # Try build
          npx @napi-rs/cli build --platform --release --target x86_64-unknown-linux-gnu
          
          if [ $? -eq 0 ] && [ -f *.node ]; then
            echo "‚úÖ Strategy 1 succeeded - audio disabled"
            echo "BUILD_SUCCESS=strategy1" >> $GITHUB_ENV
          else
            echo "‚ùå Strategy 1 failed"
            # Restore backup
            mv Cargo.toml.backup Cargo.toml
          fi

      - name: Strategy 2 - Use static linking
        working-directory: apps/node
        continue-on-error: true
        id: build_static
        if: env.BUILD_SUCCESS == ''
        run: |
          echo "üîß Strategy 2: Building with static linking..."
          
          # Try static linking to avoid system library conflicts
          export RUSTFLAGS="-C target-feature=+crt-static"
          export PKG_CONFIG_ALL_STATIC=1
          
          npx @napi-rs/cli build --platform --release --target x86_64-unknown-linux-gnu
          
          if [ $? -eq 0 ] && [ -f *.node ]; then
            echo "‚úÖ Strategy 2 succeeded - static linking"
            echo "BUILD_SUCCESS=strategy2" >> $GITHUB_ENV
          else
            echo "‚ùå Strategy 2 failed"
          fi

      - name: Strategy 3 - Install compatible pipewire version
        working-directory: apps/node
        continue-on-error: true
        id: build_pipewire
        if: env.BUILD_SUCCESS == ''
        run: |
          echo "üîß Strategy 3: Installing pipewire and trying again..."
          
          # Install pipewire packages (Ubuntu 20.04 has older, compatible versions)
          sudo apt-get install -y libpipewire-0.3-dev || true
          
          # Regular build with audio
          npx @napi-rs/cli build --platform --release --target x86_64-unknown-linux-gnu
          
          if [ $? -eq 0 ] && [ -f *.node ]; then
            echo "‚úÖ Strategy 3 succeeded - with audio"
            echo "BUILD_SUCCESS=strategy3" >> $GITHUB_ENV
          else
            echo "‚ùå Strategy 3 failed"
          fi

      - name: Strategy 4 - Minimal build
        working-directory: apps/node
        continue-on-error: true
        id: build_minimal
        if: env.BUILD_SUCCESS == ''
        run: |
          echo "üîß Strategy 4: Minimal build with cargo directly..."
          
          # Try building the core library without NAPI wrapper
          cargo build --release --target x86_64-unknown-linux-gnu --no-default-features
          
          # Check if we got a library file
          if [ -f target/x86_64-unknown-linux-gnu/release/libcap_node.so ]; then
            echo "‚úÖ Core library built, converting to .node file"
            cp target/x86_64-unknown-linux-gnu/release/libcap_node.so cap-node.linux-x64-gnu.node
            echo "BUILD_SUCCESS=strategy4" >> $GITHUB_ENV
          else
            echo "‚ùå Strategy 4 failed"
          fi

      - name: Verify build success
        working-directory: apps/node
        run: |
          if [ "$BUILD_SUCCESS" = "" ]; then
            echo "‚ùå All build strategies failed"
            exit 1
          fi
          
          echo "‚úÖ Build succeeded using: $BUILD_SUCCESS"
          echo "üìÅ Build artifacts:"
          ls -la *.node
          
          # Show file info
          for file in *.node; do
            if [ -f "$file" ]; then
              echo "File: $file"
              file "$file"
              echo "Size: $(du -h "$file" | cut -f1)"
            fi
          done

      - name: Test module loading
        working-directory: apps/node
        run: |
          echo "Testing module loading..."
          node -e "
            try {
              const cap = require('./index.js');
              console.log('‚úÖ Module loaded successfully');
              console.log('Available functions:', Object.keys(cap));
              console.log('Build strategy used: ${{ env.BUILD_SUCCESS }}');
            } catch (e) {
              console.error('‚ùå Module load failed:', e.message);
              process.exit(1);
            }
          "

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: cap-node-linux-x64
          path: apps/node/*.node
          retention-days: 7

      - name: Build summary
        run: |
          echo "üéâ Linux build completed successfully!"
          echo "Strategy used: ${{ env.BUILD_SUCCESS }}"
          echo "This build may have limited or no audio support on Linux"
          echo "For full audio support, use macOS or Windows builds"